classdef uipreview_colorbar < TComponent
    properties (Constant)
        Type = "axes"
    end
    properties (SetAccess = immutable)
        rc
        im
        tx_min; tx_max; tx_label
        cm

        el
    end

    methods (Access = ?Bezoar)
        function updateuiprvw_contours(obj)
            obj.updateColorbar()
        end
        function updateuiprvw_settings(obj)
            obj.updateColorbar()
        end
        function updateuiprvw_positions(obj)
            set(obj.Handle, ...
                "Position", obj.Data.uiprvw_positions.position_colorbar)
        end
    end     % BEZOAR
    methods (Access = private)
        function updateColorbar(obj)
            at = obj.Data.uiprvw.at;
            lv = obj.Data.uiprvw_contours.levels;

            if any(isfinite(at), "all")
                if obj.Data.uiprvw_settings.showTimeDelays
                    set(obj.tx_label, ...
                        "String", "Time (Î”s)")
                    lv = lv - min(lv);
                else
                    set(obj.tx_label, ...
                        "String", "Time (s)")
                end
                
                n = length(lv);

                set(obj.rc, ...
                    "FaceColor", "none", ...
                    "Position", [0.5 0.5 (n - 1) 1])
                set(obj.im, ...
                    "CData", (1:n - 1))
                set(obj.tx_min, ...
                    "String", num2str(lv(1)) + " s", ...
                    "Position", [0 1] + 0.5)
                set(obj.tx_max, ...
                    "String", num2str(lv(end)) + " s", ...
                    "Position", [(n - 1) 1] + 0.5)
                set(obj.tx_label, ...
                    "Position", [(n/2) 2.5])

                set(obj.Handle, ...
                    "XLim", [0 (n - 1)] + 0.5, ...
                    "YLim", [0 3] + 0.5, ...
                    "Colormap", obj.Data.uiprvw_contours.colourmap)
            else
                set(obj.rc, ...
                    "FaceColor", [240 240 240]/256, ...
                    "Position", [0.5 0.5 1 1])
                set(obj.im, ...
                    "CData", [])
                set(obj.tx_min, ...
                    "String", "")
                set(obj.tx_max, ...
                    "String", "")
                set(obj.tx_label, ...
                    "String", "No wave selected", ...
                    "Position", [1 2.5])

                set(obj.Handle, ...
                    "XLim", [0 1] + 0.5, ...
                    "YLim", [0 3] + 0.5)
            end
        end
    end     % PRIVATE
    methods (Access = protected)
        function menuFcn(obj, e)
            switch e.Source.Text
                case "Absolute"
                    obj.Data.uiprvw_settings.setTimeDelayMode(false)
                case "Delay"
                    obj.Data.uiprvw_settings.setTimeDelayMode(true)
                case "0.25 s"
                    obj.Data.uiprvw_contours.setInterval(0.25)
                case "0.5 s"
                    obj.Data.uiprvw_contours.setInterval(0.5)
                case "1 s"
                    obj.Data.uiprvw_contours.setInterval(1)
                case "2 s"
                    obj.Data.uiprvw_contours.setInterval(2)
                otherwise 
                    return
            end
            set(e.Source.Parent.Children, ...
                "Checked", "off")
            set(e.Source, ...
                "Checked", "on")
        end
        function mouseAxesClickRight(obj)
            set(obj.cm, ...
                "Position", get(obj.Window, "CurrentPoint"), ...
                "Visible", "on")
            set(obj.rc, ...
                "LineWidth", 2)
            [obj.el(:).Enabled] = deal(true);
        end
        function checkCMVisibility(obj)
            if ~obj.cm.Visible
                set(obj.rc, ...
                    "LineWidth", 0.5)
                [obj.el(:).Enabled] = deal(false);
            end
        end
    end     % PROTECTED
    methods % CONSTRUCTOR
        function obj = uipreview_colorbar()
            set(obj.Handle, ...
                ... Ticks
                "XTick", [], ...
                "YTick", [], ...
                ... Rulers
                "YLim", [-1 1], ...
                "XLim", [0 1], ...
                "YDir", "reverse", ...
                "XColor", "w", ...
                "YColor", "w", ...
                ... Box Styling
                "Color", [0.9 0.9 0.9], ...
                "Box", "on", ...
                ... Position
                "Units", "pixels", ...
                ... Interactivity
                "Clipping", "off", ...
                "Visible", "off", ...
                ... Callback Execution Control
                "PickableParts", "all");

            % Graphics
            obj.im = image(obj.Handle, ...
                ... Image Data and Quality
                "CData", [], ...
                "CDataMapping", "scaled");
            obj.rc = rectangle(obj.Handle, ...
                ... Color and Styling
                "FaceColor", "none", ...
                "EdgeColor", "w", ...
                "AlignVertexCenters", "on", ...
                ... Position
                "Position", [0 -1 1 1]);
            obj.tx_min = text(obj.Handle, 0, 0, "", ...
                ... Text
                "Color", "w", ...
                ... Font
                "FontSize", 8, ...
                ... Text Box
                "HorizontalAlignment", "left", ...
                "VerticalAlignment", "top");
            obj.tx_max = text(obj.Handle, 0, 0, "", ...
                ... Text
                "Color", "w", ...
                ... Font
                "FontSize", 8, ...
                ... Text Box
                "HorizontalAlignment", "right", ...
                "VerticalAlignment", "top");
            obj.tx_label = text(obj.Handle, 0, 0, "", ...
                ... Text
                "Color", "w", ...
                ... Font
                "FontSize", 8, ...
                ... Text Box
                "HorizontalAlignment", "center", ...
                "VerticalAlignment", "middle");

            % Let axes capture all mouse clicks
            set(allchild(obj.Handle), ...
                "PickableParts", "none")

            % Create context menus
            obj.cm = uicontextmenu(obj.Window);
            cb = uimenu(obj.cm, ...
                "Text", "Display mode");
            uimenu(cb, ...
                "Text", "Absolute", ...
                "Checked", "on")
            uimenu(cb, ...
                "Text", "Delay")

            ti = uimenu(obj.cm, ...
                "Text", "Interval");
            uimenu(ti, ...
                "Text", "0.25 s");
            uimenu(ti, ...
                "Text", "0.5 s");
            uimenu(ti, ...
                "Text", "1 s");
            uimenu(ti, ...
                "Text", "2 s", ...
                "Checked", "on");

            obj.addlistener(findobj(obj.cm, "Children", gobjects(0)), ...
                "Action", @(~, e) obj.menuFcn(e))
            obj.el = [ ...
                obj.addlistener(obj.Window, ...
                "WindowMouseMotion", @(~, ~) obj.checkCMVisibility())
                obj.addlistener(obj.Window, ...
                "WindowMousePress", @(~, ~) obj.checkCMVisibility())];
        end
    end     % CONSTRUCTOR
end